/*! \page page_logger Logging

\section logging Logging

GNU Radio has a logging interface to enable various levels of logging
information to be printed to the console or a file. The logger derives
from log4cxx (http://logging.apache.org/log4cxx) which is readily
available in most Linux distributions. This is an optional dependency
and GNU Radio will work without it.

When configuring GNU Radio, the -DENABLE_GR_LOG=On|Off option to cmake
will allow the user to toggle use of the logger on and off and will
turn off if log4cxx is not available.

Logging is useful for blocks to print out certain amounts of data at
different levels. These levels are:

    TRACE < DEBUG < INFO < WARN < ERROR < FATAL

The order here determines the level of output. When using the Debug
level, for instance, all Debug and higher messages are logged and
Trace is ignored.

\subsection use_logging Using the Logging Features

In a GNU Radio block, you use the logging features by calling macros
that are defined in gr_log.h.

The logger must be properly configured, which is easiest by defining a
configuration file. The log4cxx website will provide more information
on how configuration works and looks. Mostly, a default configuration
script provided with GNU Radio can be used. After installation, the
default configuration script is located at:

<pre>
    $prefix/etc/gnuradio/gr_log_default.xml
</pre>

However, we use the global GNU Radio configuration file to tell the
system where this file is located. In the [LOG] section of the
configuration file, the location of the logger's XML file can be
specified. The default configuration file is found in:

<pre>
    $prefix/etc/gnuradio/conf.d/gnuradio-core.conf
</pre>

A local "~/.gnuradio/config.conf" file can be used to override any
parameter in the global file (see \ref prefs for more details).

For the following examples, we will assume that our local
"~/.gnuradio/config.conf" looks like this:

\code
[LOG]
log_file = /opt/gr/etc/gnuadio/gr_log_default.xml
log_level = All
debug_level = Off
\endcode

GNU Radio includes two logger's that are defined for each block for
use whenever necessary. There is a standard logger that is used to
provide information about the normal operation of a block and a
separate debug logger that can be used when developing and debugging a
block. Both of these exist for each block as d_logger and
d_debug_logger.

In the above config file, we have turned on the standard logger
(d_logger) and turned off the debug logger (d_debug_logger). So even
if the debug logger is used in the code, it will not actually output
any information. Conversely, any level of output passed to the
standard logger will output because we have turned this value to
"all."

To use these loggers inside of a GNU Radio block, we use the protected
data members of gr_block and pass them to our pre-defined macros:

\code
  GR_LOG_<level>(<logger>, "<Message to print>");
\endcode

Where \<level\> is one of the levels as mentioned above, \<logger\> is
either d_logger or d_debug_logger, and \<Message to print\> is the
message we want to output. If we wanted to output an INFO level
message to the standard logger and a WARN level message to the debug
logger, it would look like this:

\code
  GR_LOG_INFO(d_logger, "Some info about the block");
  GR_LOG_WARN(d_debug_logger, "Some warning about the block");
\endcode

When this is printed to wherever you are directing the output of the
logger, it will look like:

<pre>
    gr::log :INFO: <block's alias> - Some info about the block
    gr::debug :WARN: <block's alias> - Some warning about the block
</pre>

This provides us information about where the message came from, the
level of the message, and the block that generated the message. We use
the concept of the block's alias which by default (i.e., unless
otherwise set by the user) includes the name of the block and a unique
ID to distinguish it from other blocks of the same type.

The various logging macros are defined in gr_log.h. Here are some
simple examples of using them:

\code
  GR_LOG_TRACE(LOG, "TRACE message");
  GR_LOG_DEBUG(LOG, "DEBUG message");
  GR_LOG_INFO(LOG, "INFO message");
  GR_LOG_WARN(LOG, "WARNING message");
  GR_LOG_ERROR(LOG, "ERROR message");
  GR_FATAL(LOG, "FATAL message");
  GR_ERRORIF(LOG, a>b, "CONDITIONAL ERROR message");
  GR_ASSERT(LOG, a>b, "ASSERT error message");
\endcode

If the logger is not enabled either manually or because the log4cxx
library was not discovered, all of these macros default to nops, so
they can be safely used in any blocks without worrying about whether
or not gr-log is enabled.


\subsection advlog Advanced Usage

The description above for using the logging facilities is specific to
GNU Radio blocks. We have put the code necessary to access the
debugger into the gr_block parent class to simplify access and make
sure all blocks have the ability to quickly and easily use the logger.

For non gr_block-based code, we have to get some information about the
logger in order to properly access it. Each logger only exists once as
a singleton in the system, but we need to get a pointer to the right
logger and then set it up for our local use. The following code
snippet shows how to do this to get access to the standard logger,
which has a root of "gr_log." (access to the debug logger is similar
except we would use "gr_log_debug." in the GR_LOG_GETLOGGER call):

\code
    gr_prefs *p = gr_prefs::singleton();
    std::string log_file = p->get_string("LOG", "log_config", "");
    std::string log_level = p->get_string("LOG", "log_level", "off");
    GR_CONFIG_LOGGER(log_file);
    GR_LOG_GETLOGGER(LOG, "gr_log." + alias());
    GR_LOG_SET_LEVEL(LOG, log_level);
\endcode

This creates a pointer called LOG (which is instantiated as a
log4cxx:LoggerPtr in the macro) that we can now use locally as the
input to our logging macros like 'GR_LOG_TRACE(LOG, "message")'.

*/
